import 'package:app/core/models/models.dart' show ChallengeStatus;
import 'package:app/shared/widgets/loading_widget.dart';
import 'package:app/shared/widgets/widgets.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:app/core/providers/providers.dart';
import 'package:go_router/go_router.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameOrEmailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _obscurePassword = true;

  @override
  void dispose() {
    _usernameOrEmailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _login() async {
    if (_formKey.currentState!.validate()) {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);

      // Düzeltme: AuthProvider'ın login metodunun imzasına uygun parametreler
      final success = await authProvider.login(
        _usernameOrEmailController.text,
        _passwordController.text, // or true, depending on your logic
      );

      if (success == true && mounted) {
        context.go('/home');
      } else if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(authProvider.error ?? 'Giriş başarısız')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final authProvider = Provider.of<AuthProvider>(context);

    return Scaffold(
      body: SafeArea(
        child: LayoutBuilder(
          builder: (context, constraints) {
            return SingleChildScrollView(
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  minHeight: constraints.maxHeight,
                ),
                child: IntrinsicHeight(
                  child: Padding(
                    padding: const EdgeInsets.all(24),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          // Logo ve Başlık
                          Column(
                            children: [
                              Container(
                                width: 80,
                                height: 80,
                                decoration: BoxDecoration(
                                  gradient: LinearGradient(
                                    colors: [
                                      theme.colorScheme.primary,
                                      theme.colorScheme.secondary,
                                    ],
                                  ),
                                  borderRadius: BorderRadius.circular(20),
                                ),
                                child: const Icon(
                                  Icons.task_alt,
                                  color: Colors.white,
                                  size: 40,
                                ),
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'Nuvana',
                                style: theme.textTheme.headlineMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'Görevlerini tamamla, arkadaşlarınla yarış!',
                                style: theme.textTheme.bodyMedium?.copyWith(
                                  color: theme.colorScheme.onSurface
                                      .withOpacity(0.7),
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),

                          const SizedBox(height: 40),

                          // Form Alanları
                          TextFormField(
                            controller: _usernameOrEmailController,
                            decoration: const InputDecoration(
                              labelText: 'Kullanıcı Adı veya E-posta',
                              prefixIcon: Icon(Icons.person_outline),
                            ),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Kullanıcı adı veya e-posta gerekli';
                              }
                              return null;
                            },
                          ),

                          const SizedBox(height: 16),

                          TextFormField(
                            controller: _passwordController,
                            decoration: InputDecoration(
                              labelText: 'Şifre',
                              prefixIcon: const Icon(Icons.lock_outline),
                              suffixIcon: IconButton(
                                onPressed: () {
                                  setState(() {
                                    _obscurePassword = !_obscurePassword;
                                  });
                                },
                                icon: Icon(
                                  _obscurePassword
                                      ? Icons.visibility_outlined
                                      : Icons.visibility_off_outlined,
                                ),
                              ),
                            ),
                            obscureText: _obscurePassword,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Şifre gerekli';
                              }
                              if (value.length < 6) {
                                return 'Şifre en az 6 karakter olmalı';
                              }
                              return null;
                            },
                          ),

                          if (authProvider.error != null) ...[
                            const SizedBox(height: 16),
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.red.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                    color: Colors.red.withOpacity(0.3)),
                              ),
                              child: Text(
                                authProvider.error!,
                                style: TextStyle(color: Colors.red.shade700),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ],

                          const SizedBox(height: 24),

                          // Giriş Butonu - DÜZELTME: Buton her zaman aktif
                          ElevatedButton(
                            onPressed: () {
                              if (_formKey.currentState!.validate()) {
                                _login();
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              backgroundColor: theme.colorScheme.primary,
                            ),
                            child: authProvider.isLoading
                                ? const SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor:
                                          AlwaysStoppedAnimation(Colors.white),
                                    ),
                                  )
                                : const Text(
                                    'Giriş Yap',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                          ),

                          const SizedBox(height: 16),

                          // Demo Giriş Butonu
                          OutlinedButton(
                            onPressed: () {
                              _usernameOrEmailController.text = 'demo';
                              _passwordController.text = 'demo123';
                              if (_formKey.currentState!.validate()) {
                                _login();
                              }
                            },
                            style: OutlinedButton.styleFrom(
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              side:
                                  BorderSide(color: theme.colorScheme.primary),
                            ),
                            child: const Text(
                              'Demo Hesabıyla Giriş',
                              style: TextStyle(fontSize: 16),
                            ),
                          ),

                          const Spacer(),

                          // Kayıt Ol Linki
                          Padding(
                            padding: const EdgeInsets.only(top: 20),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Text(
                                  'Hesabın yok mu? ',
                                  style: theme.textTheme.bodyMedium,
                                ),
                                TextButton(
                                  onPressed: () => context.push('/register'),
                                  child: const Text('Kayıt Ol'),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

class RegisterScreen extends StatefulWidget {
  const RegisterScreen({super.key});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;

  @override
  void dispose() {
    _usernameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  void _register() async {
    if (_formKey.currentState!.validate()) {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);

      final success = await authProvider.register(
        _usernameController.text,
        _emailController.text,
        _passwordController.text,
      );

      if (success && mounted) {
        context.go('/home');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final authProvider = Provider.of<AuthProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Kayıt Ol'),
        leading: IconButton(
          onPressed: () => context.pop(),
          icon: const Icon(Icons.arrow_back),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 20),
                Text(
                  'Hesap Oluştur',
                  style: theme.textTheme.headlineSmall,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 8),
                Text(
                  'Nuvana topluluğuna katıl ve görevleri tamamlamaya başla!',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: theme.colorScheme.onSurface.withOpacity(0.7),
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 32),
                TextFormField(
                  controller: _usernameController,
                  decoration: const InputDecoration(
                    labelText: 'Kullanıcı Adı',
                    prefixIcon: Icon(Icons.person_outline),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Kullanıcı adı gerekli';
                    }
                    if (value.length < 3) {
                      return 'Kullanıcı adı en az 3 karakter olmalı';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _emailController,
                  decoration: const InputDecoration(
                    labelText: 'E-posta',
                    prefixIcon: Icon(Icons.email_outlined),
                  ),
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'E-posta gerekli';
                    }
                    if (!value.contains('@')) {
                      return 'Geçerli bir e-posta girin';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _passwordController,
                  decoration: InputDecoration(
                    labelText: 'Şifre',
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      onPressed: () {
                        setState(() {
                          _obscurePassword = !_obscurePassword;
                        });
                      },
                      icon: Icon(
                        _obscurePassword
                            ? Icons.visibility_outlined
                            : Icons.visibility_off_outlined,
                      ),
                    ),
                  ),
                  obscureText: _obscurePassword,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Şifre gerekli';
                    }
                    if (value.length < 6) {
                      return 'Şifre en az 6 karakter olmalı';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _confirmPasswordController,
                  decoration: InputDecoration(
                    labelText: 'Şifre Tekrar',
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      onPressed: () {
                        setState(() {
                          _obscureConfirmPassword = !_obscureConfirmPassword;
                        });
                      },
                      icon: Icon(
                        _obscureConfirmPassword
                            ? Icons.visibility_outlined
                            : Icons.visibility_off_outlined,
                      ),
                    ),
                  ),
                  obscureText: _obscureConfirmPassword,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Şifre tekrarı gerekli';
                    }
                    if (value != _passwordController.text) {
                      return 'Şifreler eşleşmiyor';
                    }
                    return null;
                  },
                ),
                if (authProvider.error != null) ...[
                  const SizedBox(height: 16),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.red.withOpacity(0.3)),
                    ),
                    child: Text(
                      authProvider.error!,
                      style: TextStyle(color: Colors.red.shade700),
                    ),
                  ),
                ],
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: authProvider.isLoading
                      ? null
                      : () {
                          if (_formKey.currentState!.validate()) {
                            _register();
                          }
                        },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    backgroundColor: theme.colorScheme.primary,
                    disabledBackgroundColor:
                        theme.colorScheme.primary.withOpacity(0.5),
                  ),
                  child: authProvider.isLoading
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation(Colors.white),
                          ),
                        )
                      : const Text(
                          'Kayıt Ol',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                ),
                const SizedBox(height: 16),
                OutlinedButton(
                  onPressed: () => context.pop(),
                  style: OutlinedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    side: BorderSide(color: theme.colorScheme.primary),
                  ),
                  child: const Text('Giriş Yap'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<TaskProvider>(context, listen: false).loadTasks;
      Provider.of<TaskProvider>(context, listen: false).loadChallenges;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: IndexedStack(
          index: _selectedIndex,
          children: const [
            _HomeTabContent(),
            _TasksTabContent(),
            _ChallengesTabContent(),
            _ProfileTabContent(),
          ],
        ),
      ),
      bottomNavigationBar: _buildBottomNavigationBar(),
    );
  }

  Widget _buildBottomNavigationBar() {
    final theme = Theme.of(context);
    final screenWidth = MediaQuery.of(context).size.width;

    return Container(
      decoration: BoxDecoration(
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        currentIndex: _selectedIndex,
        onTap: (index) {
          setState(() {
            _selectedIndex = index;
          });
        },
        selectedItemColor: theme.colorScheme.primary,
        unselectedItemColor: theme.colorScheme.onSurface.withOpacity(0.6),
        selectedFontSize: screenWidth < 360 ? 10 : 12,
        unselectedFontSize: screenWidth < 360 ? 9 : 11,
        iconSize: screenWidth < 360 ? 20 : 24,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Ana Sayfa',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.assignment),
            label: 'Görevler',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.flash_on),
            label: 'Meydan Oku',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profil',
          ),
        ],
      ),
    );
  }
}

// Ana Sayfa Tab İçeriği - Responsive
class _HomeTabContent extends StatelessWidget {
  const _HomeTabContent();

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 360;

    return CustomScrollView(
      slivers: [
        // App Bar - Responsive
        SliverAppBar(
          expandedHeight: isSmallScreen ? 150 : 200,
          floating: false,
          pinned: true,
          flexibleSpace: FlexibleSpaceBar(
            title: Consumer<AuthProvider>(
              builder: (context, authProvider, child) {
                return Text(
                  'Merhaba, ${authProvider.currentUser?.username ?? 'Kullanıcı'}!',
                  style: TextStyle(
                    fontSize: isSmallScreen ? 14 : 16,
                    fontWeight: FontWeight.w600,
                  ),
                );
              },
            ),
            background: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    theme.colorScheme.primary,
                    theme.colorScheme.secondary,
                  ],
                ),
              ),
              child: Center(
                child: Icon(
                  Icons.task_alt,
                  size: isSmallScreen ? 40 : 60,
                  color: Colors.white,
                ),
              ),
            ),
          ),
          actions: [
            Consumer<ThemeProvider>(
              builder: (context, themeProvider, child) {
                return IconButton(
                  onPressed: themeProvider.toggleTheme,
                  icon: Icon(
                    themeProvider.isDarkMode
                        ? Icons.light_mode
                        : Icons.dark_mode,
                    size: isSmallScreen ? 20 : 24,
                  ),
                );
              },
            ),
          ],
        ),

        // İçerik - Responsive Padding
        SliverPadding(
          padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
          sliver: SliverList(
            delegate: SliverChildListDelegate([
              // İstatistikler - Responsive
              _buildResponsiveStatsSection(),
              SizedBox(height: isSmallScreen ? 16 : 24),

              // Son Görevler - Responsive
              _buildRecentTasksSection(),
              SizedBox(height: isSmallScreen ? 16 : 24),

              // Aktif Meydan Okumalar - Responsive
              _buildActiveChallengesSection(),

              // Alt boşluk
              const SizedBox(height: 20),
            ]),
          ),
        ),
      ],
    );
  }

  Widget _buildResponsiveStatsSection() {
    return Consumer2<AuthProvider, TaskProvider>(
      builder: (context, authProvider, taskProvider, child) {
        final completedTasks = taskProvider.completedTasks.length;
        final totalTasks = taskProvider.tasks.length;
        final totalPoints = authProvider.currentUser?.totalPoints ?? 0;
        final screenWidth = MediaQuery.of(context).size.width;
        final isSmallScreen = screenWidth < 360;

        return Card(
          elevation: isSmallScreen ? 2 : 4,
          child: Container(
            padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'İstatistikler',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontSize: isSmallScreen ? 16 : 18,
                      ),
                ),
                SizedBox(height: isSmallScreen ? 12 : 16),

                // Responsive stat items
                screenWidth < 300
                    ? Column(
                        children: [
                          _buildStatItem(
                            icon: Icons.assignment_turned_in,
                            label: 'Tamamlanan',
                            value: '$completedTasks',
                            color: Colors.green,
                            isSmall: true,
                          ),
                          const SizedBox(height: 12),
                          _buildStatItem(
                            icon: Icons.assignment,
                            label: 'Toplam Görev',
                            value: '$totalTasks',
                            color: Colors.blue,
                            isSmall: true,
                          ),
                          const SizedBox(height: 12),
                          _buildStatItem(
                            icon: Icons.star,
                            label: 'Puan',
                            value: '$totalPoints',
                            color: Colors.amber,
                            isSmall: true,
                          ),
                        ],
                      )
                    : Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          Expanded(
                            child: _buildStatItem(
                              icon: Icons.assignment_turned_in,
                              label: 'Tamamlanan',
                              value: '$completedTasks',
                              color: Colors.green,
                              isSmall: isSmallScreen,
                            ),
                          ),
                          Expanded(
                            child: _buildStatItem(
                              icon: Icons.assignment,
                              label: 'Toplam Görev',
                              value: '$totalTasks',
                              color: Colors.blue,
                              isSmall: isSmallScreen,
                            ),
                          ),
                          Expanded(
                            child: _buildStatItem(
                              icon: Icons.star,
                              label: 'Puan',
                              value: '$totalPoints',
                              color: Colors.amber,
                              isSmall: isSmallScreen,
                            ),
                          ),
                        ],
                      ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildStatItem({
    required IconData icon,
    required String label,
    required String value,
    required Color color,
    bool isSmall = false,
  }) {
    return Column(
      children: [
        Container(
          padding: EdgeInsets.all(isSmall ? 8 : 12),
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            borderRadius: BorderRadius.circular(isSmall ? 8 : 12),
          ),
          child: Icon(
            icon,
            color: color,
            size: isSmall ? 20 : 24,
          ),
        ),
        SizedBox(height: isSmall ? 4 : 8),
        Text(
          value,
          style: TextStyle(
            fontSize: isSmall ? 16 : 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: isSmall ? 10 : 12,
            color: Colors.grey,
          ),
          textAlign: TextAlign.center,
          maxLines: 2,
          overflow: TextOverflow.ellipsis,
        ),
      ],
    );
  }

  Widget _buildRecentTasksSection() {
    return Consumer<TaskProvider>(
      builder: (context, taskProvider, child) {
        if (taskProvider.isLoading) {
          return const LoadingWidget(message: 'Görevler yükleniyor...');
        }

        if (taskProvider.error != null) {
          return Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  const Icon(Icons.error, color: Colors.red, size: 48),
                  const SizedBox(height: 8),
                  Text(
                    'Hata',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    taskProvider.error!,
                    style: Theme.of(context).textTheme.bodySmall,
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 12),
                  ElevatedButton(
                    onPressed: () => taskProvider.loadTasks,
                    child: const Text('Tekrar Dene'),
                  ),
                ],
              ),
            ),
          );
        }

        final recentTasks = taskProvider.tasks.take(3).toList();
        final screenWidth = MediaQuery.of(context).size.width;
        final isSmallScreen = screenWidth < 360;

        if (recentTasks.isEmpty) {
          return Card(
            child: Padding(
              padding: EdgeInsets.all(isSmallScreen ? 16 : 24),
              child: Column(
                children: [
                  Icon(
                    Icons.assignment,
                    size: isSmallScreen ? 48 : 64,
                    color: Colors.grey,
                  ),
                  SizedBox(height: isSmallScreen ? 12 : 16),
                  Text(
                    'Henüz görev yok',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontSize: isSmallScreen ? 16 : 18,
                        ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'İlk görevini oluşturmak için görevler sekmesine git',
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          fontSize: isSmallScreen ? 12 : 14,
                        ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          );
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      'Son Görevler',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontSize: isSmallScreen ? 16 : 18,
                          ),
                    ),
                  ),
                  TextButton(
                    onPressed: () {
                      // Ana sayfadaki bottom navigation'ı görevler sekmesine geçir
                    },
                    child: Text(
                      'Tümünü Gör',
                      style: TextStyle(
                        fontSize: isSmallScreen ? 12 : 14,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            ...recentTasks.map((task) => Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: TaskCard(
                      task: task,
                      onTap: () => context.push('/task/${task.id}'),
                      onComplete: () =>
                          taskProvider.completeTask(task.id, task.userId)),
                )),
          ],
        );
      },
    );
  }

  Widget _buildActiveChallengesSection() {
    return Consumer<TaskProvider>(
      builder: (context, taskProvider, child) {
        final activeChallenges = taskProvider.challenges
            .where((c) => c.status == ChallengeStatus.accepted)
            .take(2)
            .toList();

        final screenWidth = MediaQuery.of(context).size.width;
        final isSmallScreen = screenWidth < 360;

        if (activeChallenges.isEmpty) {
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8),
                child: Text(
                  'Aktif Meydan Okumalar',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontSize: isSmallScreen ? 16 : 18,
                      ),
                ),
              ),
              const SizedBox(height: 8),
              Card(
                child: Padding(
                  padding: EdgeInsets.all(isSmallScreen ? 16 : 24),
                  child: Column(
                    children: [
                      Icon(
                        Icons.flash_off,
                        size: isSmallScreen ? 48 : 64,
                        color: Colors.grey,
                      ),
                      SizedBox(height: isSmallScreen ? 12 : 16),
                      Text(
                        'Aktif meydan okuma yok',
                        style:
                            Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontSize: isSmallScreen ? 16 : 18,
                                ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Arkadaşlarını meydan okumaya davet et!',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              fontSize: isSmallScreen ? 12 : 14,
                            ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: isSmallScreen ? 12 : 16),
                      ElevatedButton.icon(
                        onPressed: () => context.push('/challenge'),
                        icon: const Icon(Icons.flash_on),
                        label: const Text('Meydan Oku'),
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(
                            horizontal: isSmallScreen ? 16 : 24,
                            vertical: isSmallScreen ? 8 : 12,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          );
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      'Aktif Meydan Okumalar',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontSize: isSmallScreen ? 16 : 18,
                          ),
                    ),
                  ),
                  TextButton(
                    onPressed: () => context.push('/challenge'),
                    child: Text(
                      'Tümünü Gör',
                      style: TextStyle(
                        fontSize: isSmallScreen ? 12 : 14,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            ...activeChallenges.map((challenge) => Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: ChallengeCard(
                    challenge: challenge,
                    onTap: () {
                      // Challenge detayına git
                    },
                  ),
                )),
          ],
        );
      },
    );
  }
}

// Diğer tab içerikleri aynı şekilde responsive hale getirilecek...
// (Kodun uzunluğu nedeniyle kısaltıldı)
class _TasksTabContent extends StatelessWidget {
  const _TasksTabContent();

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Görevler'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'Aktif'),
              Tab(text: 'Tamamlanan'),
            ],
          ),
          actions: [
            IconButton(
              onPressed: () {
                _showCreateTaskDialog(context);
              },
              icon: const Icon(Icons.add),
            ),
          ],
        ),
        body: Consumer<TaskProvider>(
          builder: (context, taskProvider, child) {
            if (taskProvider.isLoading) {
              return const LoadingWidget(message: 'Görevler yükleniyor...');
            }

            if (taskProvider.error != null) {
              return Center(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(Icons.error, color: Colors.red, size: 64),
                      const SizedBox(height: 16),
                      Text(
                        'Hata',
                        style: Theme.of(context).textTheme.titleMedium,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        taskProvider.error!,
                        style: Theme.of(context).textTheme.bodyMedium,
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => taskProvider.loadTasks,
                        child: const Text('Tekrar Dene'),
                      ),
                    ],
                  ),
                ),
              );
            }

            return TabBarView(
              children: [
                _buildTaskList(taskProvider.pendingTasks, context),
                _buildTaskList(taskProvider.completedTasks, context),
              ],
            );
          },
        ),
      ),
    );
  }

  Widget _buildTaskList(List<dynamic> tasks, BuildContext context) {
    if (tasks.isEmpty) {
      return const Center(
        child: Padding(
          padding: EdgeInsets.all(32),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.assignment, size: 64, color: Colors.grey),
              SizedBox(height: 16),
              Text(
                'Görev bulunamadı',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
              ),
              SizedBox(height: 8),
              Text(
                'Yeni görevler eklemek için + butonunu kullan',
                style: TextStyle(color: Colors.grey),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      );
    }

    return ListView.builder(
      itemCount: tasks.length,
      padding: const EdgeInsets.all(16),
      itemBuilder: (context, index) {
        final task = tasks[index];
        return Container(
          margin: const EdgeInsets.only(bottom: 8),
          child: TaskCard(
            task: task,
            onTap: () => context.push('/task/${task.id}'),
            onComplete: task.isCompleted
                ? null
                : () {
                    Provider.of<TaskProvider>(context, listen: false)
                        .completeTask(task.id, task.userId);
                  },
          ),
        );
      },
    );
  }

  void _showCreateTaskDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Yeni Görev'),
        content: const Text('Görev oluşturma özelliği yakında eklenecek!'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }
}

// Meydan Okumalar Tab İçeriği - Responsive
class _ChallengesTabContent extends StatelessWidget {
  const _ChallengesTabContent();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Meydan Okumalar'),
        actions: [
          IconButton(
            onPressed: () => context.push('/friends'),
            icon: const Icon(Icons.people),
          ),
        ],
      ),
      body: Consumer<TaskProvider>(
        builder: (context, taskProvider, child) {
          if (taskProvider.isLoading) {
            return const LoadingWidget(
                message: 'Meydan okumalar yükleniyor...');
          }

          if (taskProvider.error != null) {
            return Center(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(Icons.error, color: Colors.red, size: 64),
                    const SizedBox(height: 16),
                    Text(
                      'Hata',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      taskProvider.error!,
                      style: Theme.of(context).textTheme.bodyMedium,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: () => taskProvider.loadChallenges,
                      child: const Text('Tekrar Dene'),
                    ),
                  ],
                ),
              ),
            );
          }

          if (taskProvider.challenges.isEmpty) {
            return const Center(
              child: Padding(
                padding: EdgeInsets.all(32),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.flash_off, size: 64, color: Colors.grey),
                    SizedBox(height: 16),
                    Text(
                      'Meydan okuma yok',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Arkadaşlarını meydan okumaya davet et!',
                      style: TextStyle(color: Colors.grey),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            );
          }

          return ListView.builder(
            itemCount: taskProvider.challenges.length,
            padding: const EdgeInsets.all(16),
            itemBuilder: (context, index) {
              final challenge = taskProvider.challenges[index];
              return Container(
                margin: const EdgeInsets.only(bottom: 8),
                child: ChallengeCard(
                  challenge: challenge,
                  onTap: () {
                    // Challenge detayına git
                  },
                  onAccept: challenge.status == ChallengeStatus.pending
                      ? () {
                          // Challenge'ı kabul et
                        }
                      : null,
                  onReject: challenge.status == ChallengeStatus.pending
                      ? () {
                          // Challenge'ı reddet
                        }
                      : null,
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => context.push('/challenge'),
        child: const Icon(Icons.add),
      ),
    );
  }
}

// Profil Tab İçeriği - Responsive
class _ProfileTabContent extends StatelessWidget {
  const _ProfileTabContent();

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 360;

    return Consumer<AuthProvider>(
      builder: (context, authProvider, child) {
        final user = authProvider.currentUser;

        return CustomScrollView(
          slivers: [
            SliverAppBar(
              expandedHeight: isSmallScreen ? 150 : 200,
              pinned: true,
              flexibleSpace: FlexibleSpaceBar(
                title: Text(
                  user?.username ?? 'Profil',
                  style: TextStyle(
                    fontSize: isSmallScreen ? 14 : 16,
                  ),
                ),
                background: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        theme.colorScheme.primary,
                        theme.colorScheme.secondary,
                      ],
                    ),
                  ),
                  child: Center(
                    child: CircleAvatar(
                      radius: isSmallScreen ? 30 : 40,
                      backgroundColor: Colors.white.withOpacity(0.2),
                      child: Text(
                        user?.username.substring(0, 1).toUpperCase() ?? 'U',
                        style: TextStyle(
                          fontSize: isSmallScreen ? 24 : 32,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
            SliverPadding(
              padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
              sliver: SliverList(
                delegate: SliverChildListDelegate([
                  // Kullanıcı Bilgileri - Responsive
                  Card(
                    child: Padding(
                      padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
                      child: Column(
                        children: [
                          _buildProfileInfo(
                            context,
                            icon: Icons.person,
                            label: 'Kullanıcı Adı',
                            value: user?.username ?? 'Bilinmiyor',
                            isSmall: isSmallScreen,
                          ),
                          const Divider(),
                          _buildProfileInfo(
                            context,
                            icon: Icons.email,
                            label: 'E-posta',
                            value: user?.email ?? 'Bilinmiyor',
                            isSmall: isSmallScreen,
                          ),
                          const Divider(),
                          _buildProfileInfo(
                            context,
                            icon: Icons.star,
                            label: 'Toplam Puan',
                            value: '${user?.totalPoints ?? 0}',
                            isSmall: isSmallScreen,
                          ),
                        ],
                      ),
                    ),
                  ),

                  SizedBox(height: isSmallScreen ? 12 : 16),

                  // Ayarlar - Responsive
                  Card(
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.people),
                          title: Text(
                            'Arkadaşlar',
                            style: TextStyle(
                              fontSize: isSmallScreen ? 14 : 16,
                            ),
                          ),
                          trailing:
                              const Icon(Icons.arrow_forward_ios, size: 16),
                          onTap: () => context.push('/friends'),
                          dense: isSmallScreen,
                        ),
                        const Divider(height: 1),
                        Consumer<ThemeProvider>(
                          builder: (context, themeProvider, child) {
                            return ListTile(
                              leading: Icon(
                                themeProvider.isDarkMode
                                    ? Icons.dark_mode
                                    : Icons.light_mode,
                              ),
                              title: Text(
                                'Tema',
                                style: TextStyle(
                                  fontSize: isSmallScreen ? 14 : 16,
                                ),
                              ),
                              trailing: Switch(
                                value: themeProvider.isDarkMode,
                                onChanged: (value) =>
                                    themeProvider.toggleTheme(),
                              ),
                              dense: isSmallScreen,
                            );
                          },
                        ),
                        const Divider(height: 1),
                        ListTile(
                          leading: const Icon(Icons.settings),
                          title: Text(
                            'Ayarlar',
                            style: TextStyle(
                              fontSize: isSmallScreen ? 14 : 16,
                            ),
                          ),
                          trailing:
                              const Icon(Icons.arrow_forward_ios, size: 16),
                          onTap: () {
                            // Ayarlar sayfasına git
                          },
                          dense: isSmallScreen,
                        ),
                        const Divider(height: 1),
                        ListTile(
                          leading: const Icon(Icons.help),
                          title: Text(
                            'Yardım',
                            style: TextStyle(
                              fontSize: isSmallScreen ? 14 : 16,
                            ),
                          ),
                          trailing:
                              const Icon(Icons.arrow_forward_ios, size: 16),
                          onTap: () {
                            // Yardım sayfasına git
                          },
                          dense: isSmallScreen,
                        ),
                        const Divider(height: 1),
                        ListTile(
                          leading: const Icon(Icons.logout, color: Colors.red),
                          title: Text(
                            'Çıkış Yap',
                            style: TextStyle(
                              color: Colors.red,
                              fontSize: isSmallScreen ? 14 : 16,
                            ),
                          ),
                          onTap: () => _showLogoutDialog(context),
                          dense: isSmallScreen,
                        ),
                      ],
                    ),
                  ),

                  // Alt boşluk
                  const SizedBox(height: 20),
                ]),
              ),
            ),
          ],
        );
      },
    );
  }

  Widget _buildProfileInfo(
    BuildContext context, {
    required IconData icon,
    required String label,
    required String value,
    bool isSmall = false,
  }) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: isSmall ? 4 : 8),
      child: Row(
        children: [
          Icon(icon, size: isSmall ? 18 : 20),
          SizedBox(width: isSmall ? 8 : 12),
          Expanded(
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: isSmall ? 14 : 16,
              ),
            ),
          ),
          Flexible(
            child: Text(
              value,
              style: TextStyle(
                color: Colors.grey,
                fontSize: isSmall ? 13 : 15,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  void _showLogoutDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Çıkış Yap'),
        content: const Text('Çıkış yapmak istediğinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('İptal'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              Provider.of<AuthProvider>(context, listen: false).logout();
              context.go('/login');
            },
            child: const Text(
              'Çıkış Yap',
              style: TextStyle(color: Colors.red),
            ),
          ),
        ],
      ),
    );
  }
}

// Arkadaş ekleme ekranı
class AddFriendScreen extends StatefulWidget {
  const AddFriendScreen({super.key});

  @override
  State<AddFriendScreen> createState() => _AddFriendScreenState();
}

class _AddFriendScreenState extends State<AddFriendScreen> {
  final _searchController = TextEditingController();
  final List<String> _searchResults = [];
  bool _isSearching = false;

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  void _searchUsers() async {
    setState(() {
      _isSearching = true;
    });

    // Simüle edilmiş arama sonuçları
    await Future.delayed(const Duration(seconds: 1));

    setState(() {
      _searchResults.clear();
      if (_searchController.text.isNotEmpty) {
        _searchResults.addAll([
          'Ahmet Yılmaz',
          'Ayşe Demir',
          'Mehmet Kaya',
          'Zeynep Çelik',
        ]);
      }
      _isSearching = false;
    });
  }

  void _sendFriendRequest(String username) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
          content:
              Text('$username kullanıcısına arkadaşlık isteği gönderildi')),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Arkadaş Ekle'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // Arama kutusu
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Kullanıcı adı veya e-posta ara',
                prefixIcon: const Icon(Icons.search),
                suffixIcon: IconButton(
                  icon: const Icon(Icons.clear),
                  onPressed: () {
                    _searchController.clear();
                    setState(() {
                      _searchResults.clear();
                    });
                  },
                ),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              onSubmitted: (value) => _searchUsers(),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _searchUsers,
              child: const Text('Ara'),
            ),
            const SizedBox(height: 24),
            // Arama sonuçları
            if (_isSearching)
              const CircularProgressIndicator()
            else if (_searchResults.isNotEmpty)
              Expanded(
                child: ListView.builder(
                  itemCount: _searchResults.length,
                  itemBuilder: (context, index) {
                    final user = _searchResults[index];
                    return ListTile(
                      leading: CircleAvatar(
                        backgroundColor: theme.colorScheme.primary,
                        child: Text(
                          user[0],
                          style: const TextStyle(color: Colors.white),
                        ),
                      ),
                      title: Text(user),
                      trailing: IconButton(
                        icon: const Icon(Icons.person_add),
                        onPressed: () => _sendFriendRequest(user),
                      ),
                    );
                  },
                ),
              )
            else if (_searchController.text.isEmpty)
              const Text('Arama yapmak için bir kullanıcı adı girin')
            else
              const Text('Kullanıcı bulunamadı'),
          ],
        ),
      ),
    );
  }
}
